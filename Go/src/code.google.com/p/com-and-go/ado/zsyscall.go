package ado

// generated by mkcomcall interfaces.go

import (
	"code.google.com/p/com-and-go"
	"unsafe"
)

var _ unsafe.Pointer

var IID_Command = com.NewGUID("{0000054E-0000-0010-8000-00AA006D2EA4}")
var CLSID_Command = com.NewGUID("{00000507-0000-0010-8000-00AA006D2EA4}")

func NewCommand() (*Command, error) {
	u, err := com.CoCreateInstance(CLSID_Command, nil, 21, IID_Command)
	if err != nil {
		return nil, err
	}
	return (*Command)(u), nil
}

type Command struct {
	com.IDispatch
}

func (this *Command) GetProperties() (props *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&props)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetActiveConnection() (conn *Connection, err error) {
	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&conn)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutrefActiveADOConnection(conn *Connection) (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this,
		conn)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutActiveConnection(conn com.Variant) (err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		conn)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetCommandText() (s string, err error) {
	var _tmp_s com.BStr

	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		&_tmp_s)
	if _res != 0 {
		err = com.HResult(_res)
	}
	s = _tmp_s.String()
	com.SysFreeString(_tmp_s)
	return
}

func (this *Command) PutCommandText(s string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		com.BStrFromString(s).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetCommandTimeout() (timeout int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		&timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutCommandTimeout(timeout int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[14],
		this,
		timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetPrepared() (prepared bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this,
		&prepared)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutPrepared(prepared bool) (err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this,
		com.VariantBool(prepared))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) Execute(recordsAffected *com.Variant, parameters *com.Variant, options ExecuteOptionEnum) (recordset *Recordset, err error) {
	_res, _, _ := com.Syscall(this.VTable[17],
		this,
		recordsAffected,
		parameters,
		options,
		&recordset)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) CreateParameter(name string, typ DataTypeEnum, direction ParameterDirectionEnum, size uintptr, value interface{}) (param *Parameter, err error) {
	_res, _, _ := com.Syscall(this.VTable[18],
		this,
		com.BStrFromString(name).P,
		typ,
		direction,
		size,
		com.ToVariant(value),
		&param)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetParameters() (params *Parameters, err error) {
	_res, _, _ := com.Syscall(this.VTable[19],
		this,
		&params)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutCommandType(cmdType CommandTypeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[20],
		this,
		cmdType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetCommandType() (cmdType CommandTypeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[21],
		this,
		&cmdType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetName() (name string, err error) {
	var _tmp_name com.BStr

	_res, _, _ := com.Syscall(this.VTable[22],
		this,
		&_tmp_name)
	if _res != 0 {
		err = com.HResult(_res)
	}
	name = _tmp_name.String()
	com.SysFreeString(_tmp_name)
	return
}

func (this *Command) PutName(name string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[23],
		this,
		com.BStrFromString(name).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetState() (state int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[24],
		this,
		&state)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) Cancel() (err error) {
	_res, _, _ := com.Syscall(this.VTable[25],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) PutrefCommandADOStream(stream *com.IUnknown) (err error) {
	_res, _, _ := com.Syscall(this.VTable[26],
		this,
		stream)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetCommandStream() (stream interface{}, err error) {
	var _tmp_stream com.Variant

	_res, _, _ := com.Syscall(this.VTable[27],
		this,
		&_tmp_stream)
	if _res != 0 {
		err = com.HResult(_res)
	}
	stream = _tmp_stream.ToInterface()
	return
}

func (this *Command) PutDialect(dialect string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[28],
		this,
		com.BStrFromString(dialect).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetDialect() (dialect string, err error) {
	var _tmp_dialect com.BStr

	_res, _, _ := com.Syscall(this.VTable[29],
		this,
		&_tmp_dialect)
	if _res != 0 {
		err = com.HResult(_res)
	}
	dialect = _tmp_dialect.String()
	com.SysFreeString(_tmp_dialect)
	return
}

func (this *Command) PutNamedParameters(namedParameters bool) (err error) {
	_res, _, _ := com.Syscall(this.VTable[30],
		this,
		com.VariantBool(namedParameters))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Command) GetNamedParameters() (namedParameters bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[31],
		this,
		&namedParameters)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Connection = com.NewGUID("{00000550-0000-0010-8000-00AA006D2EA4}")
var CLSID_Connection = com.NewGUID("{00000514-0000-0010-8000-00AA006D2EA4}")

func NewConnection() (*Connection, error) {
	u, err := com.CoCreateInstance(CLSID_Connection, nil, 21, IID_Connection)
	if err != nil {
		return nil, err
	}
	return (*Connection)(u), nil
}

type Connection struct {
	com.IDispatch
}

func (this *Connection) GetProperties() (props *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&props)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetConnectionString() (s string, err error) {
	var _tmp_s com.BStr

	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&_tmp_s)
	if _res != 0 {
		err = com.HResult(_res)
	}
	s = _tmp_s.String()
	com.SysFreeString(_tmp_s)
	return
}

func (this *Connection) PutConnectionString(s string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this,
		com.BStrFromString(s).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetCommandTimeout() (timeout int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		&timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutCommandTimeout(timeout int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetConnectionTimeout() (timeout int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		&timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutConnectionTimeout(timeout int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		timeout)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetVersion() (version string, err error) {
	var _tmp_version com.BStr

	_res, _, _ := com.Syscall(this.VTable[14],
		this,
		&_tmp_version)
	if _res != 0 {
		err = com.HResult(_res)
	}
	version = _tmp_version.String()
	com.SysFreeString(_tmp_version)
	return
}

func (this *Connection) Close() (err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Execute(commandText string, recordsAffected *com.Variant, options int32) (recordset *Recordset, err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this,
		com.BStrFromString(commandText).P,
		recordsAffected,
		options,
		&recordset)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) BeginTrans() (transactionLevel int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[17],
		this,
		&transactionLevel)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) CommitTrans() (err error) {
	_res, _, _ := com.Syscall(this.VTable[18],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) RollbackTrans() (err error) {
	_res, _, _ := com.Syscall(this.VTable[19],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Open(connectionString, userID, password string, options ConnectOptionEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[20],
		this,
		com.BStrFromString(connectionString).P,
		com.BStrFromString(userID).P,
		com.BStrFromString(password).P,
		options)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetErrors() (errors *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[21],
		this,
		&errors)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetDefaultDatabase() (defaultDB string, err error) {
	var _tmp_defaultDB com.BStr

	_res, _, _ := com.Syscall(this.VTable[22],
		this,
		&_tmp_defaultDB)
	if _res != 0 {
		err = com.HResult(_res)
	}
	defaultDB = _tmp_defaultDB.String()
	com.SysFreeString(_tmp_defaultDB)
	return
}

func (this *Connection) PutDefaultDatabase(defaultDB string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[23],
		this,
		com.BStrFromString(defaultDB).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetIsolationLevel() (level IsolationLevelEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[24],
		this,
		&level)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutIsolationLevel(level IsolationLevelEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[25],
		this,
		level)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetAttributes() (attr int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[26],
		this,
		&attr)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutAttributes(attr int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[27],
		this,
		attr)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetCursorLocation() (cursorLoc CursorLocationEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[28],
		this,
		&cursorLoc)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutCursorLocation(cursorLoc CursorLocationEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[29],
		this,
		cursorLoc)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetMode() (mode ConnectModeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[30],
		this,
		&mode)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) PutMode(mode ConnectModeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[31],
		this,
		mode)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetProvider() (provider string, err error) {
	var _tmp_provider com.BStr

	_res, _, _ := com.Syscall(this.VTable[32],
		this,
		&_tmp_provider)
	if _res != 0 {
		err = com.HResult(_res)
	}
	provider = _tmp_provider.String()
	com.SysFreeString(_tmp_provider)
	return
}

func (this *Connection) PutProvider(provider string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[33],
		this,
		com.BStrFromString(provider).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) GetState() (state int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[34],
		this,
		&state)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) OpenSchema(schema SchemaEnum, restrictions com.Variant, schemaID com.Variant) (recordset *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[35],
		this,
		schema,
		restrictions,
		schemaID,
		&recordset)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Connection) Cancel() (err error) {
	_res, _, _ := com.Syscall(this.VTable[36],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Field = com.NewGUID("{00000569-0000-0010-8000-00AA006D2EA4}")

type Field struct {
	com.IDispatch
}

func (this *Field) GetProperties() (props *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&props)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetActualSize() (size uintptr, err error) {
	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&size)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetAttributes() (attr int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this,
		&attr)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetDefinedSize() (size uintptr, err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		&size)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetName() (name string, err error) {
	var _tmp_name com.BStr

	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		&_tmp_name)
	if _res != 0 {
		err = com.HResult(_res)
	}
	name = _tmp_name.String()
	com.SysFreeString(_tmp_name)
	return
}

func (this *Field) GetType() (typ DataTypeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		&typ)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetValue() (val interface{}, err error) {
	var _tmp_val com.Variant

	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		&_tmp_val)
	if _res != 0 {
		err = com.HResult(_res)
	}
	val = _tmp_val.ToInterface()
	return
}

func (this *Field) PutValue(val interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[14],
		this,
		com.ToVariant(val))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetPrecision() (precision byte, err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this,
		&precision)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetNumericScale() (numericScale byte, err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this,
		&numericScale)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) AppendChunk(data interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[17],
		this,
		com.ToVariant(data))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetChunk(length int32) (data interface{}, err error) {
	var _tmp_data com.Variant

	_res, _, _ := com.Syscall(this.VTable[18],
		this,
		length,
		&_tmp_data)
	if _res != 0 {
		err = com.HResult(_res)
	}
	data = _tmp_data.ToInterface()
	return
}

func (this *Field) GetOriginalValue() (val interface{}, err error) {
	var _tmp_val com.Variant

	_res, _, _ := com.Syscall(this.VTable[19],
		this,
		&_tmp_val)
	if _res != 0 {
		err = com.HResult(_res)
	}
	val = _tmp_val.ToInterface()
	return
}

func (this *Field) GetUnderlyingValue() (val interface{}, err error) {
	var _tmp_val com.Variant

	_res, _, _ := com.Syscall(this.VTable[20],
		this,
		&_tmp_val)
	if _res != 0 {
		err = com.HResult(_res)
	}
	val = _tmp_val.ToInterface()
	return
}

func (this *Field) GetDataFormat() (df *com.IUnknown, err error) {
	_res, _, _ := com.Syscall(this.VTable[21],
		this,
		&df)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutrefDataFormat(df *com.IUnknown) (err error) {
	_res, _, _ := com.Syscall(this.VTable[22],
		this,
		df)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutPrecision(precision byte) (err error) {
	_res, _, _ := com.Syscall(this.VTable[23],
		this,
		precision)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutNumericScale(scale byte) (err error) {
	_res, _, _ := com.Syscall(this.VTable[24],
		this,
		scale)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutType(dataType DataTypeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[25],
		this,
		dataType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutDefinedSize(size uintptr) (err error) {
	_res, _, _ := com.Syscall(this.VTable[26],
		this,
		size)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) PutAttributes(attributes int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[27],
		this,
		attributes)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Field) GetStatus() (status int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[28],
		this,
		&status)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Fields = com.NewGUID("{00000564-0000-0010-8000-00AA006D2EA4}")

type Fields struct {
	com.IDispatch
}

func (this *Fields) GetCount() (c int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&c)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) _NewEnum() (obj *com.IUnknown, err error) {
	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&obj)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) Refresh() (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) GetItem(index interface{}) (item *Field, err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		com.ToVariant(index),
		&item)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) _Append(name string, typ DataTypeEnum, definedSize uintptr, attrib FieldAttributeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		com.BStrFromString(name).P,
		typ,
		definedSize,
		attrib)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) Delete(index interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		com.ToVariant(index))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) Append(name string, typ DataTypeEnum, definedSize uintptr, attrib FieldAttributeEnum, fieldValue interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		com.BStrFromString(name).P,
		typ,
		definedSize,
		attrib,
		com.ToVariant(fieldValue))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) Update() (err error) {
	_res, _, _ := com.Syscall(this.VTable[14],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) Resync(resyncValues ResyncEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this,
		resyncValues)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Fields) CancelUpdate() (err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Parameter = com.NewGUID("{0000050C-0000-0010-8000-00AA006D2EA4}")

type Parameter struct {
	com.IDispatch
}

func (this *Parameter) GetProperties() (props *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&props)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetName() (name string, err error) {
	var _tmp_name com.BStr

	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&_tmp_name)
	if _res != 0 {
		err = com.HResult(_res)
	}
	name = _tmp_name.String()
	com.SysFreeString(_tmp_name)
	return
}

func (this *Parameter) PutName(name string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this,
		com.BStrFromString(name).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetValue() (val interface{}, err error) {
	var _tmp_val com.Variant

	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		&_tmp_val)
	if _res != 0 {
		err = com.HResult(_res)
	}
	val = _tmp_val.ToInterface()
	return
}

func (this *Parameter) PutValue(val interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		com.ToVariant(val))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetType() (dataType DataTypeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		&dataType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutType(dataType DataTypeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		dataType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutDirection(parmDirection ParameterDirectionEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[14],
		this,
		parmDirection)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetDirection() (parmDirection ParameterDirectionEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this,
		&parmDirection)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutPrecision(precision byte) (err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this,
		precision)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetPrecision() (precision byte, err error) {
	_res, _, _ := com.Syscall(this.VTable[17],
		this,
		&precision)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutNumericScale(scale byte) (err error) {
	_res, _, _ := com.Syscall(this.VTable[18],
		this,
		scale)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetNumericScale() (scale byte, err error) {
	_res, _, _ := com.Syscall(this.VTable[19],
		this,
		&scale)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutSize(size uintptr) (err error) {
	_res, _, _ := com.Syscall(this.VTable[20],
		this,
		size)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetSize() (size uintptr, err error) {
	_res, _, _ := com.Syscall(this.VTable[21],
		this,
		&size)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) AppendChunk(val interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[22],
		this,
		com.ToVariant(val))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) GetAttributes() (parmAttribs int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[23],
		this,
		&parmAttribs)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameter) PutAttributes(parmAttribs int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[24],
		this,
		parmAttribs)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Parameters = com.NewGUID("{0000050D-0000-0010-8000-00AA006D2EA4}")

type Parameters struct {
	com.IDispatch
}

func (this *Parameters) GetCount() (c int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&c)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameters) _NewEnum() (obj *com.IUnknown, err error) {
	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&obj)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameters) Refresh() (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameters) Append(object *Parameter) (err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		object)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameters) Delete(index interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		com.ToVariant(index))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Parameters) GetItem(index interface{}) (object *Parameter, err error) {
	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		com.ToVariant(index),
		&object)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

var IID_Recordset = com.NewGUID("{00000556-0000-0010-8000-00AA006D2EA4}")

type Recordset struct {
	com.IDispatch
}

func (this *Recordset) GetProperties() (props *com.IDispatch, err error) {
	_res, _, _ := com.Syscall(this.VTable[7],
		this,
		&props)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetAbsolutePosition() (position PositionEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[8],
		this,
		&position)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutAbsolutePosition(position PositionEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[9],
		this,
		position)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutrefActiveADOConnection(conn *Connection) (err error) {
	_res, _, _ := com.Syscall(this.VTable[10],
		this,
		conn)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutActiveConnection(conn interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[11],
		this,
		com.ToVariant(conn))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetActiveConnection() (conn interface{}, err error) {
	var _tmp_conn com.Variant

	_res, _, _ := com.Syscall(this.VTable[12],
		this,
		&_tmp_conn)
	if _res != 0 {
		err = com.HResult(_res)
	}
	conn = _tmp_conn.ToInterface()
	return
}

func (this *Recordset) GetBOF() (bof bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[13],
		this,
		&bof)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetBookmark() (bookmark interface{}, err error) {
	var _tmp_bookmark com.Variant

	_res, _, _ := com.Syscall(this.VTable[14],
		this,
		&_tmp_bookmark)
	if _res != 0 {
		err = com.HResult(_res)
	}
	bookmark = _tmp_bookmark.ToInterface()
	return
}

func (this *Recordset) PutBookmark(bookmark interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[15],
		this,
		com.ToVariant(bookmark))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetCacheSize() (cacheSize int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[16],
		this,
		&cacheSize)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutCacheSize(cacheSize int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[17],
		this,
		cacheSize)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetCursorType() (cursorType CursorTypeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[18],
		this,
		&cursorType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutCursorType(cursorType CursorTypeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[19],
		this,
		cursorType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetEOF() (eof bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[20],
		this,
		&eof)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetFields() (fields *Fields, err error) {
	_res, _, _ := com.Syscall(this.VTable[21],
		this,
		&fields)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetLockType() (lockType LockTypeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[22],
		this,
		&lockType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutLockType(lockType LockTypeEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[23],
		this,
		lockType)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetMaxRecords() (maxRecords int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[24],
		this,
		&maxRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutMaxRecords(maxRecords int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[25],
		this,
		maxRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetRecordCount() (n int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[26],
		this,
		&n)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutrefSource(cmd *Command) (err error) {
	_res, _, _ := com.Syscall(this.VTable[27],
		this,
		cmd)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutSource(conn string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[28],
		this,
		com.BStrFromString(conn).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetSource() (source interface{}, err error) {
	var _tmp_source com.Variant

	_res, _, _ := com.Syscall(this.VTable[29],
		this,
		&_tmp_source)
	if _res != 0 {
		err = com.HResult(_res)
	}
	source = _tmp_source.ToInterface()
	return
}

func (this *Recordset) AddNew(fieldList interface{}, values interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[30],
		this,
		com.ToVariant(fieldList),
		com.ToVariant(values))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) CancelUpdate() (err error) {
	_res, _, _ := com.Syscall(this.VTable[31],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Close() (err error) {
	_res, _, _ := com.Syscall(this.VTable[32],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Delete(affectRecords AffectEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[33],
		this,
		affectRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetRows(rows int32, start interface{}, fields interface{}) (value interface{}, err error) {
	var _tmp_value com.Variant

	_res, _, _ := com.Syscall(this.VTable[34],
		this,
		rows,
		com.ToVariant(start),
		com.ToVariant(fields),
		&_tmp_value)
	if _res != 0 {
		err = com.HResult(_res)
	}
	value = _tmp_value.ToInterface()
	return
}

func (this *Recordset) Move(numRecords uintptr, start interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[35],
		this,
		numRecords,
		com.ToVariant(start))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) MoveNext() (err error) {
	_res, _, _ := com.Syscall(this.VTable[36],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) MovePrevious() (err error) {
	_res, _, _ := com.Syscall(this.VTable[37],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) MoveFirst() (err error) {
	_res, _, _ := com.Syscall(this.VTable[38],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) MoveLast() (err error) {
	_res, _, _ := com.Syscall(this.VTable[39],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Open(source interface{}, activeConnection interface{}, cursorType CursorTypeEnum, lockType LockTypeEnum, options int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[40],
		this,
		com.ToVariant(source),
		com.ToVariant(activeConnection),
		cursorType,
		lockType,
		options)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Requery(options int32) (err error) {
	_res, _, _ := com.Syscall(this.VTable[41],
		this,
		options)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) _xResync(affectRecords AffectEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[42],
		this,
		affectRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Update(fields interface{}, values interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[43],
		this,
		com.ToVariant(fields),
		com.ToVariant(values))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetAbsolutePage() (page PositionEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[44],
		this,
		&page)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutAbsolutePage(page PositionEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[45],
		this,
		page)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetEditMode() (mode EditModeEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[46],
		this,
		&mode)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetFilter() (criteria interface{}, err error) {
	var _tmp_criteria com.Variant

	_res, _, _ := com.Syscall(this.VTable[47],
		this,
		&_tmp_criteria)
	if _res != 0 {
		err = com.HResult(_res)
	}
	criteria = _tmp_criteria.ToInterface()
	return
}

func (this *Recordset) PutFilter(criteria interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[48],
		this,
		com.ToVariant(criteria))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetPageCount() (n uintptr, err error) {
	_res, _, _ := com.Syscall(this.VTable[49],
		this,
		&n)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetPageSize() (pageSize int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[50],
		this,
		&pageSize)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutPageSize(pageSize int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[51],
		this,
		pageSize,
		err)
	_ = _res
	return
}

func (this *Recordset) GetSort() (criteria string, err error) {
	var _tmp_criteria com.BStr

	_res, _, _ := com.Syscall(this.VTable[52],
		this,
		&_tmp_criteria)
	if _res != 0 {
		err = com.HResult(_res)
	}
	criteria = _tmp_criteria.String()
	com.SysFreeString(_tmp_criteria)
	return
}

func (this *Recordset) PutSort(criteria string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[53],
		this,
		com.BStrFromString(criteria).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetStatus() (status int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[54],
		this,
		&status)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetState() (state int32, err error) {
	_res, _, _ := com.Syscall(this.VTable[55],
		this,
		&state)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) _xClone() (rs *Recordset, err error) {
	_res, _, _ := com.Syscall(this.VTable[56],
		this,
		&rs)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) UpdateBatch(affectRecords AffectEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[57],
		this,
		affectRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) CancelBatch(affectRecords AffectEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[58],
		this,
		affectRecords)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetCursorLocation() (cursorLoc CursorLocationEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[59],
		this,
		&cursorLoc)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutCursorLocation(cursorLoc CursorLocationEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[60],
		this,
		cursorLoc)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) NextADORecordset() (recordsAffected interface{}, rs *Recordset, err error) {
	var _tmp_recordsAffected com.Variant

	_res, _, _ := com.Syscall(this.VTable[61],
		this,
		&_tmp_recordsAffected,
		&rs)
	if _res != 0 {
		err = com.HResult(_res)
	}
	recordsAffected = _tmp_recordsAffected.ToInterface()
	return
}

func (this *Recordset) Supports(cursorOptions CursorOptionEnum) (b bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[62],
		this,
		cursorOptions,
		&b)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetCollect(index interface{}) (value interface{}, err error) {
	var _tmp_value com.Variant

	_res, _, _ := com.Syscall(this.VTable[63],
		this,
		com.ToVariant(index),
		&_tmp_value)
	if _res != 0 {
		err = com.HResult(_res)
	}
	value = _tmp_value.ToInterface()
	return
}

func (this *Recordset) PutCollect(index interface{}, value interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[64],
		this,
		com.ToVariant(index),
		com.ToVariant(value))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetMarshalOptions() (marshal MarshalOptionsEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[65],
		this,
		&marshal)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutMarshalOptions(marshal MarshalOptionsEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[66],
		this,
		marshal)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Find(criteria string, skipRecords uintptr, searchDirection SearchDirectionEnum, start interface{}) (err error) {
	_res, _, _ := com.Syscall(this.VTable[67],
		this,
		com.BStrFromString(criteria).P,
		skipRecords,
		searchDirection,
		com.ToVariant(start))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Cancel() (err error) {
	_res, _, _ := com.Syscall(this.VTable[68],
		this)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetDataSource() (dataSource *com.IUnknown, err error) {
	_res, _, _ := com.Syscall(this.VTable[69],
		this,
		&dataSource)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutrefDataSource(dataSource *com.IUnknown) (err error) {
	_res, _, _ := com.Syscall(this.VTable[70],
		this,
		dataSource)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) _xSave(fileName string, persistFormat PersistFormatEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[71],
		this,
		com.BStrFromString(fileName).P,
		persistFormat)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetActiveCommand() (cmd *Command, err error) {
	_res, _, _ := com.Syscall(this.VTable[72],
		this,
		&cmd)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutStayInSync(stayInSync bool) (err error) {
	_res, _, _ := com.Syscall(this.VTable[73],
		this,
		com.VariantBool(stayInSync))
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetStayInSync() (stayInSync bool, err error) {
	_res, _, _ := com.Syscall(this.VTable[74],
		this,
		&stayInSync)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetString(stringFormat StringFormatEnum, numRows int32, colunDelimiter string, rowDelimiter string, nullExpr string) (ret string, err error) {
	var _tmp_ret com.BStr

	_res, _, _ := com.Syscall(this.VTable[75],
		this,
		stringFormat,
		numRows,
		com.BStrFromString(colunDelimiter).P,
		com.BStrFromString(rowDelimiter).P,
		com.BStrFromString(nullExpr).P,
		&_tmp_ret)
	if _res != 0 {
		err = com.HResult(_res)
	}
	ret = _tmp_ret.String()
	com.SysFreeString(_tmp_ret)
	return
}

func (this *Recordset) GetDataMember() (dataMember string, err error) {
	var _tmp_dataMember com.BStr

	_res, _, _ := com.Syscall(this.VTable[76],
		this,
		&_tmp_dataMember)
	if _res != 0 {
		err = com.HResult(_res)
	}
	dataMember = _tmp_dataMember.String()
	com.SysFreeString(_tmp_dataMember)
	return
}

func (this *Recordset) PutDataMember(dataMember string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[77],
		this,
		com.BStrFromString(dataMember).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) CompareBookmarks(bookmark1 interface{}, bookmark2 interface{}) (compare CompareEnum, err error) {
	_res, _, _ := com.Syscall(this.VTable[78],
		this,
		com.ToVariant(bookmark1),
		com.ToVariant(bookmark2),
		&compare)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Clone(lockType LockTypeEnum) (rs *Recordset, err error) {
	_res, _, _ := com.Syscall(this.VTable[79],
		this,
		lockType,
		&rs)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Resync(affectRecords AffectEnum, resyncValues ResyncEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[80],
		this,
		affectRecords,
		resyncValues)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) Seek(keyValues interface{}, seekOption SeekEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[81],
		this,
		com.ToVariant(keyValues),
		seekOption)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) PutIndex(index string) (err error) {
	_res, _, _ := com.Syscall(this.VTable[82],
		this,
		com.BStrFromString(index).P)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}

func (this *Recordset) GetIndex() (index string, err error) {
	var _tmp_index com.BStr

	_res, _, _ := com.Syscall(this.VTable[83],
		this,
		&_tmp_index)
	if _res != 0 {
		err = com.HResult(_res)
	}
	index = _tmp_index.String()
	com.SysFreeString(_tmp_index)
	return
}

func (this *Recordset) Save(desination interface{}, persistFormat PersistFormatEnum) (err error) {
	_res, _, _ := com.Syscall(this.VTable[84],
		this,
		com.ToVariant(desination),
		persistFormat)
	if _res != 0 {
		err = com.HResult(_res)
	}
	return
}
